package main

import (
	"bufio"
	//"bytes"
	"encoding/json"
	"fmt"
	log "github.com/Sirupsen/logrus"
	"github.com/gorilla/websocket"
	"golang.org/x/crypto/ssh"
	"io"
	"net/http"
	"strconv"
	"text/template"
	"time"
	"unicode/utf8"
)

var (
	ssh_client *ssh.Client
	upgrader   = websocket.Upgrader{}
	mt         = &master{}
)

type master struct {
	host string
	port string
	user string
	pass string
	cols string
	rows string
}

type ptyRequestMsg struct {
	Term     string
	Columns  int
	Rows     int
	Width    int
	Height   int
	Modelist string
}

func main() {
	http.Handle("/favicon.ico", http.FileServer(http.Dir("static/dist")))
	http.Handle("/static/", http.FileServer(http.Dir("static/dist")))
	http.HandleFunc("/", handle)
	http.HandleFunc("/cmd", cmdHandle)
	err := http.ListenAndServe(":8080", nil)
	if err != nil {
		log.Error(err.Error())
	} else {
		log.Info("service start.")
	}
}

//处理请求
func handle(w http.ResponseWriter, r *http.Request) {
	r.ParseForm()
	if _, ok := r.Form["action"]; ok {
		action := r.Form["action"][0]
		if action == "connect" {
			connect(w, r)
			return
		}
	}
	html, err := template.ParseFiles("static/dist/index.html")
	if err != nil {
		log.Error(err.Error())
		return
	}
	html.Execute(w, nil)
}

//连接
func connect(w http.ResponseWriter, r *http.Request) {
	r.ParseForm()
	mt.host = r.Form["host"][0]
	mt.port = r.Form["port"][0]
	mt.user = r.Form["user"][0]
	mt.pass = r.Form["pass"][0]
	mt.cols = r.Form["cols"][0]
	mt.rows = r.Form["rows"][0]
	config := &ssh.ClientConfig{
		User: mt.user,
		Auth: []ssh.AuthMethod{
			ssh.Password(mt.pass),
		},
		HostKeyCallback: ssh.InsecureIgnoreHostKey(),
	}
	connstr := fmt.Sprintf("%s:%s", mt.host, mt.port)
	client, err := ssh.Dial("tcp", connstr, config)
	ret := make(map[string]string)
	if err != nil {
		log.Error(err.Error())
		ret["msg"] = "connect failed. error:" + err.Error()
		ret["err"] = "1"
		data, _ := json.Marshal(ret)
		io.WriteString(w, string(data))
		return
	}
	ssh_client = client
	ret["msg"] = "connect success."
	ret["err"] = "0"
	dats, _ := json.Marshal(ret)
	io.WriteString(w, string(dats))
	return
}

//命令行处理
func cmdHandle(w http.ResponseWriter, r *http.Request) {
	//websocket
	ws, err := upgrader.Upgrade(w, r, nil)
	if err != nil {
		log.Error("upgrade: " + err.Error())
		return
	}
	defer ws.Close()
	//命令处理
	ptyCols, errl := strconv.Atoi(mt.cols)
	if errl != nil {
		log.Error("cols parse uint: " + errl.Error())
	}
	ptyRows, errw := strconv.Atoi(mt.rows)
	if errw != nil {
		log.Error("rows parse uint: " + errw.Error())
	}
	//session, err := ssh_client.NewSession()
	//if err != nil {
	//	log.Error("new session: " + err.Error())
	//	return
	//}
	//defer session.Close()
	modes := ssh.TerminalModes{
		ssh.ECHO:          1,
		ssh.TTY_OP_ISPEED: 14400,
		ssh.TTY_OP_OSPEED: 14400,
	}
	ch, requests, errk := ssh_client.Conn.OpenChannel("session", nil)
	if errk != nil {
		log.Error("open channel: " + errk.Error())
		return
	}
	go func() {
		for req := range requests {
			if req.WantReply {
				req.Reply(false, nil)
			}
		}
	}()
	var modeList []byte
	for k, v := range modes {
		kv := struct {
			Key byte
			Val uint32
		}{k, v}
		modeList = append(modeList, ssh.Marshal(&kv)...)
	}
	modeList = append(modeList, 0)
	pty := ptyRequestMsg{
		Term:     "xterm",
		Columns:  ptyCols,
		Rows:     ptyRows,
		Width:    ptyCols * 8,
		Height:   ptyRows * 8,
		Modelist: string(modeList),
	}
	ok, errq := ch.SendRequest("pty-req", true, ssh.Marshal(&pty))
	if !ok || errq != nil {
		if errq == nil && !ok {
			log.Error("ssh: pty-req failed")
		} else {
			log.Error("send request pty-req: " + errq.Error())
		}
		return
	}
	ok, errq = ch.SendRequest("shell", true, nil)
	if !ok || errq != nil {
		if errq == nil && !ok {
			log.Error("ssh: shell failed")
		} else {
			log.Error("send request shell: " + errq.Error())
		}
		return
	}
	done := make(chan bool, 2)
	go func() {
		defer func() {
			done <- true
		}()

		for {
			m, p, errm := ws.ReadMessage()
			if errm != nil {
				log.Error("read message: " + errm.Error())
				return
			}
			if m == websocket.TextMessage {
				if _, err = ch.Write(p); err != nil {
					return
				}
			}
		}
	}()

	go func() {
		defer func() {
			done <- true
		}()
		br := bufio.NewReader(ch)
		buf := []byte{}

		t := time.NewTimer(time.Millisecond * 100)
		defer t.Stop()
		r := make(chan rune)

		go func() {
			for {
				x, size, erru := br.ReadRune()
				if erru != nil {
					log.Error("read rune: " + erru.Error())
					return
				}
				if size > 0 {
					r <- x
				}
			}
		}()

		for {
			select {
			case <-t.C:
				if len(buf) != 0 {
					err = ws.WriteMessage(websocket.TextMessage, buf)
					buf = []byte{}
					if err != nil {
						log.Error("write message: " + err.Error())
						return
					}
				}
				t.Reset(time.Millisecond * 100)
			case d := <-r:
				if d != utf8.RuneError {
					p := make([]byte, utf8.RuneLen(d))
					utf8.EncodeRune(p, d)
					buf = append(buf, p...)
				} else {
					buf = append(buf, []byte("@")...)
				}
			}
		}

	}()
	<-done
}
